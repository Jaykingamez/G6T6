services:
  bus_stop_lookup:
    build:
      context: "./Atomic Service/bus_stop_lookup microservice"
      dockerfile: Dockerfile
    image: bus_stop_lookup:1.0
    container_name: bus_stop_lookup
    ports:
      - "5002:5002"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - app-network

  directions:
    build:
      context: "./Atomic Service/directions microservice"
      dockerfile: Dockerfile
    image: kelvinpcw/directions:1.0
    container_name: directions
    ports:
      - "5001:5001"
    environment:
      - dbURL=mysql+mysqlconnector://is213@host.docker.internal:3306/directions
    env_file:
      - .env
    networks:
      - app-network

  bus_tracking:
    build:
      context: "./Atomic Service/bus_tracking microservice"
      dockerfile: Dockerfile
    image: kelvinpcw/bus_tracking:1.0
    container_name: bus_tracking
    ports:
      - "5030:5030"
    env_file:
      - .env
    networks:
      - app-network

  bus_fare:
    build:
      context: "./Atomic Service/bus_fare microservice"
      dockerfile: Dockerfile
    image: kelvinpcw/bus_fare:1.0
    container_name: bus_fare
    ports:
      - "5003:5003"
    networks:
      - app-network

  train_fare:
    build:
      context: "./Atomic Service/train_fare microservice"
      dockerfile: Dockerfile
    image: kelvinpcw/train_fare:1.0
    container_name: train_fare
    ports:
      - "5004:5004"
    networks:
      - app-network

  emission:
    build:
      context: "./Atomic Service/emission microservice"
      dockerfile: Dockerfile
    image: kelvinpcw/emission:1.0
    container_name: emission
    ports:
      - "5005:5005"
    networks:
      - app-network

  calculate_fare:
    build:
      context: "./Composite Service/calculate_fare"
      dockerfile: Dockerfile
    image: kelvinpcw/calculate_fare:1.0
    container_name: calculate_fare
    ports:
      - "5032:5032"
    networks:
      - app-network
  plan_journey:
    build:
      context: "./Composite Service/plan_journey"
      dockerfile: Dockerfile
    image: kelvinpcw/plan_journey:1.0
    container_name: plan_journey
    ports:
      - "5031:5031"
    networks:
      - app-network
    depends_on:
      - directions
      - bus_stop_lookup
      - calculate_fare
      - bus_fare
      - train_fare
      - emission
      - bus_tracking


  composite_service:
    build: ./Composite Service/api_gateway
    ports:
      - "5000:5000"
    depends_on:
      - bus_stop_lookup
      - directions
    networks:
      - app-network  # Add this line to connect to the app-network

  user:
    build:
      context: "./Idea2/user microservice"
      dockerfile: Dockerfile
    image: smartTransport/users:1.0
    container_name: users
    ports:
      - "5201:5201"
    environment:
      - dbURL=mysql+mysqlconnector://is213@host.docker.internal:3306/users
    networks:
      - G6T6-net

  card:
    build:
      context: "./Idea2/card microservice"
      dockerfile: Dockerfile
    image: smartTransport/cards:1.0
    container_name: cards
    ports:
      - "5203:5203"
    environment:
      - dbURL=mysql+mysqlconnector://is213@host.docker.internal:3306/cards
    networks:
      - G6T6-net
  
  # transaction:
  #   build:
  #     context: "./Idea2/transaction microservice"
  #     dockerfile: Dockerfile
  #   image: smartTransport/transactions:1.0
  #   container_name: transactions
  #   ports:
  #     - "5206:5206"
  #   environment:
  #     - dbURL=mysql+mysqlconnector://is213@host.docker.internal:3306/transactions
  #   networks:
  #     - app-network

  notification:
    build:
      context: ./Idea2/notification microservice 
      dockerfile: Dockerfile   
    image: smartTransport/notificaiton:1.0
    container_name: notification            
    ports:
      - "5210:5210"   
    networks:
      - G6T6-net                    
  
  check_balance:
    build:
      context: ./Idea2/check balance microservice 
      dockerfile: Dockerfile   
    image: smartTransport/checkbalance:1.0
    container_name: checkbalance
    ports:
      - "5205:5205"
    depends_on:
      - user
      - card
    networks:
      - G6T6-net
  
  make_payment:
    build:
      context: ./Idea2/payment service  # Path to the directory containing make_payment.py and Dockerfile
      dockerfile: Dockerfile               # Name of the Dockerfile
    ports:
      - "5208:5208"                        # Map port 5008 of the container to port 5008 on the host
    depends_on:
      - check_balance
      - user
      - card
      - notification
      - rabbitmq
    networks:
      - G6T6-net
    # environment:
    #   - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
  
  top_up:
    build:
      context: ./Idea2/top up microservice 
      dockerfile: Dockerfile   
    image: smartTransport/topup:1.0
    container_name: topup    
    ports:
      - "5212:5212"
    depends_on:
      - make_payment
      - check_balance
    networks:
      - G6T6-net


  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      retries: 5
      start_period: 10s
    networks:
      - app-network
  
  # saved_routes:
  #   build:
  #     context: "./Atomic Service/saved_routes microservice"  
  #     dockerfile: Dockerfile
  #   container_name: saved_routes
  #   ports:
  #     - "5006:5006"
  #   environment:
  #     - MONGODB_HOST=mongodb  
  #     - MONGODB_PORT=27017
  #     - MONGODB_NAME=journey_planning
  #     - MONGODB_COLLECTION=saved_routes
  #   depends_on:
  #     mongodb:
  #       condition: service_healthy  
  #   networks:
  #     - app-network

  #IDEA3 - START
  selected_route:
    build:
      context: "./Idea3/SelectedRoute/"  
      dockerfile: Dockerfile
    container_name: selected_route
    ports:
      - "5301:5301"
    networks:
      - G6T6-net
    environment:
      - dbURL=mysql+mysqlconnector://is213@host.docker.internal:3306/SelectedRoute

  enable_notification:
    build:
      context: "./Idea3/EnableNotification/"  
      dockerfile: Dockerfile
    container_name: enable_notification
    ports:
      - "5302:5302"
    networks:
      - G6T6-net
    depends_on:
      - rabbitmq
  #IDEA3 - END
    

  rabbitmq:
    image: rabbitmq:3-management
    hostname: G6T6-rabbit
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes: 
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - G6T6-net

  # mongodb:
  #   image: mongo:6.0  
  #   container_name: mongodb
  #   restart: always
  #   ports:
  #     - "27017:27017"
  #   networks:
  #     - app-network
  #   volumes:
  #     - mongo-data:/data/db
  #   healthcheck:
  #     test: ["CMD", "mongosh", "--eval", "db.runCommand('ping').ok"]
  #     interval: 10s
  #     retries: 5
  #     start_period: 30s

networks:
  app-network:
    driver: bridge
  G6T6-net:
    driver: bridge
    name: G6T6-net

volumes:
  redis_data:
  # mongo-data:
  rabbitmq_data:
    name: G6T6_rabbitmq_data