services:
  bus_stop_lookup:
    build:
      context: "./Atomic Service/bus_stop_lookup microservice"
      dockerfile: Dockerfile
    image: bus_stop_lookup:1.0
    container_name: bus_stop_lookup
    ports:
      - "5002:5002"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - app-network

  directions:
    build:
      context: "./Atomic Service/directions microservice"
      dockerfile: Dockerfile
    image: kelvinpcw/directions:1.0
    container_name: directions
    ports:
      - "5001:5001"
    environment:
      - dbURL=mysql+mysqlconnector://is213@host.docker.internal:3306/directions
    env_file:
      - .env
    networks:
      - app-network

  bus_fare:
    build:
      context: "./Atomic Service/bus_fare microservice"
      dockerfile: Dockerfile
    image: kelvinpcw/bus_fare:1.0
    container_name: bus_fare
    ports:
      - "5003:5003"
    networks:
      - app-network

  train_fare:
    build:
      context: "./Atomic Service/train_fare microservice"
      dockerfile: Dockerfile
    image: kelvinpcw/train_fare:1.0
    container_name: train_fare
    ports:
      - "5004:5004"
    networks:
      - app-network

  emission:
    build:
      context: "./Atomic Service/emission microservice"
      dockerfile: Dockerfile
    image: kelvinpcw/emission:1.0
    container_name: emission
    ports:
      - "5005:5005"
    networks:
      - app-network

  composite_service:
    build: ./Composite Service/api_gateway
    ports:
      - "5000:5000"
    depends_on:
      - bus_stop_lookup
      - directions
    networks:
      - app-network  # Add this line to connect to the app-network

  payment:
    build:
      context: ./Composite Service/payment  # Path to the payment service directory
      dockerfile: Dockerfile                 # Name of the Dockerfile
    ports:
      - "3000:3000"                          # Map port 3000 of the container to port 3001 on the host
    environment:
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      retries: 5
      start_period: 10s
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  redis_data: