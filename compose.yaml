services:
  bus_stop_lookup:
    build:
      context: "./Atomic Service/bus_stop_lookup microservice"
      dockerfile: Dockerfile
    image: bus_stop_lookup:1.0
    container_name: bus_stop_lookup
    ports:
      - "5002:5002"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - app-network

  directions:
    build:
      context: "./Atomic Service/directions microservice"
      dockerfile: Dockerfile
    image: kelvinpcw/directions:1.0
    container_name: directions
    ports:
      - "5001:5001"
    environment:
      - dbURL=mysql+mysqlconnector://is213@host.docker.internal:3306/directions
    env_file:
      - .env
    networks:
      - app-network

  bus_fare:
    build:
      context: "./Atomic Service/bus_fare microservice"
      dockerfile: Dockerfile
    image: kelvinpcw/bus_fare:1.0
    container_name: bus_fare
    ports:
      - "5003:5003"
    networks:
      - app-network

  train_fare:
    build:
      context: "./Atomic Service/train_fare microservice"
      dockerfile: Dockerfile
    image: kelvinpcw/train_fare:1.0
    container_name: train_fare
    ports:
      - "5004:5004"
    networks:
      - app-network

  emission:
    build:
      context: "./Atomic Service/emission microservice"
      dockerfile: Dockerfile
    image: kelvinpcw/emission:1.0
    container_name: emission
    ports:
      - "5005:5005"
    networks:
      - app-network

  composite_service:
    build: ./Composite Service/api_gateway
    ports:
      - "5000:5000"
    depends_on:
      - bus_stop_lookup
      - directions
    networks:
      - app-network  # Add this line to connect to the app-network

  make_payment:
    build:
      context: ./Idea2/payment service  # Path to the directory containing make_payment.py and Dockerfile
      dockerfile: Dockerfile               # Name of the Dockerfile
    ports:
      - "5008:5008"                        # Map port 5008 of the container to port 5008 on the host
    # environment:
    #   - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}

  user:
    build:
      context: "./Idea2/user microservice"
      dockerfile: Dockerfile
    image: smartTransport/users:1.0
    container_name: users
    ports:
      - "5201:5201"
    environment:
      # Connect to MySQL running on the host machine via host.docker.internal
      - dbURL=mysql+mysqlconnector://root:root@host.docker.internal:3307/users
    networks:
      - app-network

  card:
    build:
      context: "./Idea2/card microservice"
      dockerfile: Dockerfile
    image: smartTransport/cards:1.0
    container_name: cards
    ports:
      - "5203:5203"
    environment:
      - dbURL=mysql+mysqlconnector://is213@host.docker.internal:3306/cards
    networks:
      - app-network
  
  transaction:
    build:
      context: "./Idea2/transaction microservice"
      dockerfile: Dockerfile
    image: smartTransport/transactions:1.0
    container_name: transactions
    ports:
      - "5206:5206"
    environment:
      - dbURL=mysql+mysqlconnector://is213@host.docker.internal:3306/transactions
    networks:
      - app-network

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      retries: 5
      start_period: 10s
    networks:
      - app-network
  
  saved_routes:
    build:
      context: "./Atomic Service/saved_routes microservice"  
      dockerfile: Dockerfile
    container_name: saved_routes
    ports:
      - "5006:5006"
    environment:
      - MONGODB_HOST=mongodb  
      - MONGODB_PORT=27017
      - MONGODB_NAME=journey_planning
      - MONGODB_COLLECTION=saved_routes
    depends_on:
      mongodb:
        condition: service_healthy  
    networks:
      - app-network

  rabbitmq:
    image: rabbitmq:3-management
    hostname: G6T6-rabbit
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes: 
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - G6T6-net

  mongodb:
    image: mongo:6.0  
    container_name: mongodb
    restart: always
    ports:
      - "27017:27017"
    networks:
      - app-network
    volumes:
      - mongo-data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.runCommand('ping').ok"]
      interval: 10s
      retries: 5
      start_period: 30s

networks:
  app-network:
    driver: bridge
  G6T6-net:
    driver: bridge
    name: G6T6-net

volumes:
  redis_data:
  mongo-data:
  rabbitmq_data:
    name: G6T6_rabbitmq_data